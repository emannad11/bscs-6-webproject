<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
   <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: #f5f7fa;
        color: #333;
    }

    .navbar {
        background: #2c3e50;
        color: white;
        padding: 1rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .navbar h1 {
        font-size: 1.5rem;
        font-weight: 600;
    }

    .nav-links {
        display: flex;
        gap: 2rem;
        align-items: center;
    }

    .nav-links a {
        color: white;
        text-decoration: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        transition: background 0.3s;
    }

    .nav-links a:hover, .nav-links a.active {
        background: #34495e;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .user-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: #3498db;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    .logout-btn {
        background: #e74c3c;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }

    .logout-btn:hover {
        background: #c0392b;
    }

    .container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .page-header h2 {
        font-size: 2.5rem;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .page-header p {
        color: #7f8c8d;
        font-size: 1.1rem;
    }

    .incidents-container {
        background: white;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .incidents-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .incidents-header h3 {
        font-size: 1.5rem;
        color: #2c3e50;
    }

    .add-incident-btn {
        background: #27ae60;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background 0.3s;
    }

    .add-incident-btn:hover {
        background: #229954;
    }

    .incidents-list {
        display: grid;
        gap: 1rem;
    }

    .incident-card {
        border: 1px solid #e1e5e9;
        border-radius: 8px;
        padding: 1.5rem;
        transition: box-shadow 0.3s;
    }

    .incident-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .incident-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }

    .incident-type {
        background: #3498db;
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .incident-type.flood {
        background: #2980b9;
    }

    .incident-type.earthquake {
        background: #e74c3c;
    }

    .incident-type.fire {
        background: #e67e22;
    }

    .incident-severity {
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .incident-severity.low {
        background: #d5f4e6;
        color: #27ae60;
    }

    .incident-severity.medium {
        background: #fef9e7;
        color: #f39c12;
    }

    .incident-severity.high {
        background: #fadbd8;
        color: #e74c3c;
    }

    .incident-location {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .incident-description {
        color: #7f8c8d;
        margin-bottom: 1rem;
        line-height: 1.5;
    }

    .incident-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.9rem;
        color: #95a5a6;
    }

    .incident-status {
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .incident-status.reported {
        background: #ebf3fd;
        color: #3498db;
    }

    .incident-status.investigating {
        background: #fef9e7;
        color: #f39c12;
    }

    .incident-status.resolved {
        background: #d5f4e6;
        color: #27ae60;
    }

    
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        overflow-y: auto;     
        padding: 2rem 0;
    }

    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 2rem;
        border-radius: 10px;
        width: 90%;
        max-width: 500px;
        position: relative;
        max-height: 90vh;    
        overflow-y: auto;    
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        position: absolute;
        right: 1rem;
        top: 1rem;
    }

    .close:hover {
        color: #000;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #2c3e50;
    }

    .form-group input, .form-group select, .form-group textarea {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e1e5e9;
        border-radius: 5px;
        font-size: 1rem;
        transition: border-color 0.3s;
    }

    .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
        outline: none;
        border-color: #3498db;
    }

    .form-group textarea {
        resize: vertical;
        min-height: 100px;
    }

    .submit-btn {
        width: 100%;
        background: #3498db;
        color: white;
        border: none;
        padding: 1rem;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s;
    }

    .submit-btn:hover {
        background: #2980b9;
    }

    .submit-btn:disabled {
        background: #bdc3c7;
        cursor: not-allowed;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #7f8c8d;
    }

    .empty-state h4 {
        margin-bottom: 1rem;
        color: #2c3e50;
    }
</style>

</head>
<body>
    <nav class="navbar">
        <h1>üö® Emergency Response System</h1>
        <div class="nav-links">
            <a href="/dashboard">Dashboard</a>
            <a href="/predict">AI Prediction</a>
            <a href="/incidents" class="active">Incidents</a>
            <a href="/resources">Resources</a>
        </div>
        <div class="user-info">
            <div class="user-avatar" id="userAvatar"></div>
            <span id="userName">Loading...</span>
            <button class="logout-btn" onclick="logout()">Logout</button>
        </div>
    </nav>

    <div class="container">
        <div class="page-header">
            <h2>üìã Incident Reports</h2>
            <p>Track and manage emergency incidents</p>
        </div>

        <div class="incidents-container">
            <div class="incidents-header">
                <h3>Recent Incidents</h3>
                <button class="add-incident-btn" onclick="openModal()">
                    ‚ûï Report New Incident
                </button>
            </div>
            
            <div class="incidents-list" id="incidents-list">
                <% if (incidents && incidents.length > 0) { %>
                    <% incidents.forEach(incident => { %>
                        <div class="incident-card">
                            <div class="incident-header">
                                <div>
                                    <span class="incident-type <%= incident.type.toLowerCase() %>">
                                        <%= incident.type %>
                                    </span>
                                </div>
                                <span class="incident-severity <%= incident.severity.toLowerCase() %>">
                                    <%= incident.severity %>
                                </span>
                            </div>
                            
                            <div class="incident-location">üìç <%= incident.location %></div>
                            <div class="incident-description"><%= incident.description %></div>
                            
                            <div class="incident-meta">
                                <span>Reported by: <%= incident.reporter %></span>
                                <span class="incident-status <%= incident.status.toLowerCase() %>">
                                    <%= incident.status %>
                                </span>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <h4>No incidents reported</h4>
                        <p>Click "Report New Incident" to add the first incident report.</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

   
    <div id="incidentModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h3>Report New Incident</h3>
            
            <form id="incidentForm">
                <div class="form-group">
                    <label for="type">Incident Type</label>
                    <select id="type" name="type" required>
                        <option value="">Select type</option>
                        <option value="Flood">Flood</option>
                        <option value="Earthquake">Earthquake</option>
                        <option value="Fire">Fire</option>
                        <option value="Landslide">Landslide</option>
                        <option value="Storm">Storm</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="location">Location</label>
                    <input type="text" id="location" name="location" required placeholder="Enter location">
                </div>
                
                <div class="form-group">
                    <label for="severity">Severity</label>
                    <select id="severity" name="severity" required>
                        <option value="">Select severity</option>
                        <option value="Low">Low</option>
                        <option value="Medium">Medium</option>
                        <option value="High">High</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" required placeholder="Describe the incident in detail"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="reporter">Reporter Name</label>
                    <input type="text" id="reporter" name="reporter" placeholder="Your name (optional)">
                </div>
                
                <button type="submit" class="submit-btn" id="submit-btn">
                    üìã Submit Report
                </button>
            </form>
        </div>
    </div>

    <script>
    
        async function loadUserInfo() {
            try {
                const response = await fetch('/auth/profile');
                if (response.ok) {
                    const data = await response.json();
                    const user = data.user;
                    
                    document.getElementById('userName').textContent = user.name;
                    document.getElementById('userAvatar').textContent = user.name.charAt(0).toUpperCase();
                } else {
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Error loading user info:', error);
                window.location.href = '/login';
            }
        }
        
    
        async function logout() {
            try {
                const response = await fetch('/auth/logout', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    window.location.href = '/login';
                } else {
                    console.error('Logout failed');
                }
            } catch (error) {
                console.error('Error during logout:', error);
                window.location.href = '/login';
            }
        }
        
        
        function openModal() {
            document.getElementById('incidentModal').style.display = 'block';
        }
        
        function closeModal() {
            document.getElementById('incidentModal').style.display = 'none';
            document.getElementById('incidentForm').reset();
        }
        
    
        window.onclick = function(event) {
            const modal = document.getElementById('incidentModal');
            if (event.target === modal) {
                closeModal();
            }
        }
        
    
        document.getElementById('incidentForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            const submitBtn = document.getElementById('submit-btn');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Submitting...';
            
            try {
                const response = await fetch('/incidents', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                
                    window.location.reload();
                } else {
                    throw new Error(result.error || 'Failed to submit incident');
                }
                
            } catch (error) {
                console.error('Error submitting incident:', error);
                alert('Failed to submit incident: ' + error.message);
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'üìã Submit Report';
            }
        });
    
        document.addEventListener('DOMContentLoaded', () => {
            loadUserInfo();
        });
    </script>
</body>
</html>

